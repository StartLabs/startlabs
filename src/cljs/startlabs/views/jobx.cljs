;;This file autogenerated from 
;;
;;  src/cljx/startlabs/views/jobx.cljx
;;
^{:cljs true, :line 6} (ns startlabs.views.jobx)
^{:cljs true, :line 9} (defn is-email? [v] ^{:line 10} (re-matches #"(?i)[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?" v))
^{:cljs true, :line 13} (def converter ^{:line 13} (Markdown/getSanitizingConverter.))
^{:cljs true, :line 14} (defn markdownify [text] ^{:line 14} (.makeHtml converter text))
^{:line 16} (defn is-phone? "Naive, really just checks that the characters are only numbers, digits, dashes, parens, or dots." [v] ^{:line 19} (re-matches #"^[\d-\.\(\)\s]{7,15}$" v))
^{:line 21} (defn is-www? "Checks if site begins with www. (but not http)" [v] ^{:line 24} (not ^{:line 24} (nil? ^{:line 24} (re-find #"^www\." v))))
^{:line 26} (defn linkify "Converts an email address, telephone number, or url into a proper link\n   to be used as the href attribute in an HTML anchor." [text] ^{:line 30} (str ^{:line 31} (condp apply [text] nil? "" is-email? "mailto:" is-phone? "tel://" is-www? "http://" "") text))
^{:line 39} (defn more-id [id] ^{:line 40} (str "more-" id))
^{:line 42} (defn job-delete-modal [job] [:div {:id ^{:line 43} (str "delete-" ^{:line 43} (:id job)), :class "modal hide fade", :tabindex "-1", :role "dialog", :aria-hidden true} [:div.modal-header [:button.close {:type "button", :data-dismiss "modal", :aria-hidden true} "&times;"] [:h3 "Are you sure you want to remove this job?"]] [:div.modal-body [:p ^{:line 51} (:company job) ": " ^{:line 51} (:position job)] [:p "This will hide it from the listing."]] [:form.modal-footer {:action ^{:line 54} (str "/job/" ^{:line 54} (:id job) "/delete"), :method "post"} [:a.btn {:href "#", :data-dismiss "modal", :aria-hidden true} "Whoops, never mind."] [:button.btn.btn-danger {:type "submit"} "Yes, Remove it."]]])
^{:line 60} (defn job-summary [job-info editable?] [:div.job-summary ^{:line 62} (if editable? [:div.pull-right [:a.edit-link {:href ^{:line 64} (str "/job/" ^{:line 64} (:id job-info))} "Edit"] [:a.btn.btn-danger {:href ^{:line 66} (str "#delete-" ^{:line 66} (:id job-info)), :role "button"} "Delete"]]) [:h2 [:a {:href ^{:line 69} (or ^{:line 69} (linkify ^{:line 69} (:website job-info)) "#")} ^{:line 70} (:company job-info) ":"] [:small " " ^{:line 71} (:position job-info)]] [:div.row-fluid.dateloc [:div.span6 [:i.icon.icon-calendar] ^{:line 75} (:start-date job-info) ^{:line 76} (if ^{:line 76} (not ^{:line 76} (= ^{:line 76} (:fulltime? job-info) "true")) ^{:line 77} (str " - " ^{:line 77} (:end-date job-info)))] [:div.span6 [:i.icon.icon-map-marker] ^{:line 78} (:location job-info)]] [:div.row-fluid [:div.span6 [:span.label.label-info ^{:line 82} (if ^{:line 82} (= ^{:line 82} (:fulltime? job-info) "true") "Fulltime" "Internship")]] [:div.span6.employees [:span.badge.badge-info ^{:line 87} (:company-size job-info)] "Employees"]] [:a.read {:href ^{:line 89} (str "#" ^{:line 89} (more-id ^{:line 89} (:id job-info)))} "Read More..."]])
^{:line 91} (defn job-card [job-info editable?] [:div.job-info ^{:line 93} (if editable? ^{:line 93} (job-delete-modal job-info)) ^{:line 94} (job-summary job-info editable?) [:div.row-fluid.more {:id ^{:line 96} (more-id ^{:line 96} (:id job-info))} [:div.description ^{:line 98} (markdownify ^{:line 98} (:description job-info))] ^{:line 100} (if editable? [:p [:a {:href ^{:line 101} (str "/job/" ^{:line 101} (:id job-info) "/edit")} "Resend edit link to author"]]) [:div.well.well-small "Contact: " [:i.icon.icon-envelope] ^{:line 107} (let [contact-info ^{:line 107} (:contact-info job-info)] [:a {:href ^{:line 109} (linkify contact-info), :onclick ^{:line 110} (str "_gaq.push(['_trackEvent', 'Jobs', 'Contact', '" ^{:line 111} (:id job-info) "']);")} contact-info])]]])
^{:line 114} (defn half-list [half-jobs editable?] [:div.span6 ^{:line 116} (for [job half-jobs] [:div.job.thumbnail {:id ^{:line 117} (:id job)} ^{:line 118} (job-card job editable?)])])
^{:line 120} (defn job-list [jobs editable? q page page-count] ^{:line 121} (let [[left-jobs right-jobs] ^{:line 121} (split-at ^{:line 121} (/ ^{:line 121} (count jobs) 2) jobs) base-url ^{:line 122} (str "/jobs?q=" q "&page=") inc-pc ^{:line 123} (inc page-count)] ^{:line 124} (if ^{:line 124} (empty? left-jobs) [:div#job-list.span12 [:h2 "No jobs found. Try revising your query."]] [:div#job-list.span12 ^{:line 129} (half-list left-jobs editable?) ^{:line 130} (half-list right-jobs editable?) [:div.span12.pagination.pagination-centered [:ul [:li {:class ^{:line 134} (if ^{:line 134} (= page 1) "disabled" "active")} [:a {:href ^{:line 135} (if ^{:line 135} (= page 1) "#" ^{:line 136} (str base-url ^{:line 136} (dec page)))} "Prev"]] ^{:line 138} (for [i ^{:line 138} (range 1 inc-pc)] [:li {:class ^{:line 139} (if ^{:line 139} (= page i) "disabled" "active")} [:a {:href ^{:line 140} (if ^{:line 140} (= page i) "#" ^{:line 141} (str base-url i))} i]]) [:li {:class ^{:line 143} (if ^{:line 143} (= page page-count) "disabled" "active")} [:a {:href ^{:line 144} (if ^{:line 144} (= page page-count) "#" ^{:line 145} (str base-url ^{:line 145} (inc page)))} "Next"]]]]])))
;;This file autogenerated from 
;;
;;  src/cljx/startlabs/views/jobx.cljx
;;
^{:cljs true, :line 5} (ns startlabs.views.jobx)
^{:cljs true, :line 8} (defn is-email? [v] ^{:line 9} (re-matches #"(?i)[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?" v))
^{:cljs true, :line 12} (def converter ^{:line 12} (Markdown/getSanitizingConverter.))
^{:cljs true, :line 13} (defn markdownify [text] ^{:line 13} (.makeHtml converter text))
^{:line 15} (defn is-phone? "Naive, really just checks that the characters are only numbers, digits, dashes, parens, or dots." [v] ^{:line 18} (re-matches #"^[\d-\.\(\)\s]{7,15}$" v))
^{:line 20} (defn is-www? "Checks if site begins with www. (but not http)" [v] ^{:line 23} (not ^{:line 23} (nil? ^{:line 23} (re-find #"^www\." v))))
^{:line 25} (defn linkify "Converts an email address, telephone number, or url into a proper link\n   to be used as the href attribute in an HTML anchor." [text] ^{:line 29} (str ^{:line 30} (condp apply [text] nil? "" is-email? "mailto:" is-phone? "tel://" is-www? "http://" "") text))
^{:line 38} (defn more-id [id] ^{:line 39} (str "more-" id))
^{:line 41} (defn job-delete-modal [job] [:div {:id ^{:line 42} (str "delete-" ^{:line 42} (:id job)), :class "modal hide fade", :tabindex "-1", :role "dialog", :aria-hidden true} [:div.modal-header [:button.close {:type "button", :data-dismiss "modal", :aria-hidden true} "&times;"] [:h3 "Are you sure you want to remove this job?"]] [:div.modal-body [:p ^{:line 50} (:company job) ": " ^{:line 50} (:position job)] [:p "This will hide it from the listing."]] [:form.modal-footer {:action ^{:line 53} (str "/job/" ^{:line 53} (:id job) "/delete"), :method "post"} [:a.btn {:href "#", :data-dismiss "modal", :aria-hidden true} "Whoops, never mind."] [:button.btn.btn-danger {:type "submit"} "Yes, Remove it."]]])
^{:line 59} (defn job-summary [job-info editable?] [:div.job-summary ^{:line 61} (if editable? [:div.pull-right [:a.edit-link {:href ^{:line 63} (str "/job/" ^{:line 63} (:id job-info))} "Edit"] [:a.btn.btn-danger {:href ^{:line 65} (str "#delete-" ^{:line 65} (:id job-info)), :role "button"} "Delete"]]) [:h2 [:a {:href ^{:line 68} (or ^{:line 68} (linkify ^{:line 68} (:website job-info)) "#")} ^{:line 69} (:company job-info) ":"] [:small " " ^{:line 70} (:position job-info)]] [:div.row-fluid.meta [:div.span6 [:i.icon.icon-calendar] ^{:line 74} (:start-date job-info) ^{:line 75} (if ^{:line 75} (not ^{:line 75} (= ^{:line 75} (:fulltime? job-info) "true")) ^{:line 76} (str " - " ^{:line 76} (:end-date job-info)))] [:div.span6 [:span.label.label-info ^{:line 79} (if ^{:line 79} (= ^{:line 79} (:fulltime? job-info) "true") "Fulltime" "Internship")]] [:div.span6 [:i.icon.icon-map-marker] ^{:line 83} (:location job-info)] [:div.span6.employees [:span.badge.badge-info ^{:line 86} (:company-size job-info)] "Employees"]] [:a.read {:href ^{:line 88} (str "#" ^{:line 88} (more-id ^{:line 88} (:id job-info)))} "Read More..."]])
^{:line 90} (defn job-card [job-info editable?] [:div.job-info ^{:line 92} (if editable? ^{:line 92} (job-delete-modal job-info)) ^{:line 93} (job-summary job-info editable?) [:div.row-fluid.more {:id ^{:line 95} (more-id ^{:line 95} (:id job-info))} [:div.description ^{:line 97} (markdownify ^{:line 97} (:description job-info))] ^{:line 99} (if editable? [:p [:a {:href ^{:line 100} (str "/job/" ^{:line 100} (:id job-info) "/edit")} "Resend edit link to author"]]) [:div.well.well-small "Contact: " [:i.icon.icon-envelope] ^{:line 106} (let [contact-info ^{:line 106} (:contact-info job-info)] [:a {:href ^{:line 108} (linkify contact-info), :onclick ^{:line 109} (str "_gaq.push(['_trackEvent', 'Jobs', 'Contact', '" ^{:line 110} (:id job-info) "']);")} contact-info])]]])
^{:line 113} (defn half-list [half-jobs editable?] [:div.span6 ^{:line 115} (for [job half-jobs] [:div.job.thumbnail {:id ^{:line 116} (:id job)} ^{:line 117} (job-card job editable?)])])
^{:line 123} (defn job-list [{:keys [jobs editable? q page page-count]}] ^{:line 124} (let [[left-jobs right-jobs] ^{:line 124} (split-at ^{:line 124} (/ ^{:line 124} (count jobs) 2) jobs) base-url ^{:line 125} (str "/jobs?q=" q "&page=") inc-pc ^{:line 126} (inc page-count)] ^{:line 127} (if ^{:line 127} (empty? left-jobs) [:div#job-list.span12 [:h2 "No jobs found. Try revising your query."]] [:div#job-list.span12 ^{:line 132} (half-list left-jobs editable?) ^{:line 133} (half-list right-jobs editable?) [:div.span12.pagination.pagination-centered [:ul [:li {:class ^{:line 137} (if ^{:line 137} (= page 1) "disabled" "active")} [:a {:href ^{:line 138} (if ^{:line 138} (= page 1) "#" ^{:line 139} (str base-url ^{:line 139} (dec page)))} "Prev"]] ^{:line 141} (for [i ^{:line 141} (range 1 inc-pc)] [:li {:class ^{:line 142} (if ^{:line 142} (= page i) "disabled" "active")} [:a {:href ^{:line 143} (if ^{:line 143} (= page i) "#" ^{:line 144} (str base-url i))} i]]) [:li {:class ^{:line 146} (if ^{:line 146} (= page page-count) "disabled" "active")} [:a {:href ^{:line 147} (if ^{:line 147} (= page page-count) "#" ^{:line 148} (str base-url ^{:line 148} (inc page)))} "Next"]]]]])))